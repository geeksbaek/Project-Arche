{
  "_args": [
    [
      {
        "raw": "gulp@github:gulpjs/gulp#4.0",
        "scope": null,
        "escapedName": "gulp",
        "name": "gulp",
        "rawSpec": "github:gulpjs/gulp#4.0",
        "spec": "github:gulpjs/gulp#4.0",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:gulpjs/gulp.git#4.0",
          "sshUrl": "git+ssh://git@github.com/gulpjs/gulp.git#4.0",
          "httpsUrl": "git+https://github.com/gulpjs/gulp.git#4.0",
          "gitUrl": "git://github.com/gulpjs/gulp.git#4.0",
          "shortcut": "github:gulpjs/gulp#4.0",
          "directUrl": "https://raw.githubusercontent.com/gulpjs/gulp/4.0/package.json"
        }
      },
      "C:\\Users\\geeks\\Documents\\GitHub\\Project-Arche\\client"
    ]
  ],
  "_from": "gulpjs/gulp#4.0",
  "_id": "gulp@4.0.0-alpha.2",
  "_inCache": true,
  "_location": "/gulp",
  "_phantomChildren": {
    "archy": "1.0.0",
    "chalk": "1.1.3",
    "fancy-log": "1.2.0",
    "gulplog": "1.0.0",
    "interpret": "1.0.1",
    "liftoff": "2.3.0",
    "lodash.isfunction": "3.0.8",
    "lodash.isplainobject": "4.0.6",
    "lodash.isstring": "4.0.1",
    "lodash.sortby": "4.7.0",
    "matchdep": "1.0.1",
    "mute-stdout": "1.0.0",
    "pretty-hrtime": "1.0.3",
    "semver-greatest-satisfied-range": "1.0.0",
    "tildify": "1.2.0",
    "v8flags": "2.0.11",
    "wreck": "6.3.0",
    "yargs": "3.32.0"
  },
  "_requested": {
    "raw": "gulp@github:gulpjs/gulp#4.0",
    "scope": null,
    "escapedName": "gulp",
    "name": "gulp",
    "rawSpec": "github:gulpjs/gulp#4.0",
    "spec": "github:gulpjs/gulp#4.0",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:gulpjs/gulp.git#4.0",
      "sshUrl": "git+ssh://git@github.com/gulpjs/gulp.git#4.0",
      "httpsUrl": "git+https://github.com/gulpjs/gulp.git#4.0",
      "gitUrl": "git://github.com/gulpjs/gulp.git#4.0",
      "shortcut": "github:gulpjs/gulp#4.0",
      "directUrl": "https://raw.githubusercontent.com/gulpjs/gulp/4.0/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/gulpjs/gulp.git#e9e5ab7e70080e1bfb5650a4fdc4c8849e70b3e0",
  "_shasum": "d5a09ecb04562fd07748ad95af52f7a2cfd3d738",
  "_shrinkwrap": null,
  "_spec": "gulp@github:gulpjs/gulp#4.0",
  "_where": "C:\\Users\\geeks\\Documents\\GitHub\\Project-Arche\\client",
  "author": {
    "name": "Fractal",
    "email": "contact@wearefractal.com",
    "url": "http://wearefractal.com/"
  },
  "bin": {
    "gulp": "./bin/gulp.js"
  },
  "bugs": {
    "url": "https://github.com/gulpjs/gulp/issues"
  },
  "dependencies": {
    "glob-watcher": "^3.0.0",
    "gulp-cli": "^1.0.0",
    "undertaker": "^1.0.0",
    "vinyl-fs": "^2.0.0"
  },
  "description": "The streaming build system",
  "devDependencies": {
    "coveralls": "^2.7.0",
    "graceful-fs": "^3.0.0",
    "istanbul": "^0.3.0",
    "jscs": "~1.12.0",
    "jshint": "^2.5.0",
    "jshint-stylish": "^1.0.0",
    "mkdirp": "^0.5.0",
    "mocha": "^2.0.1",
    "mocha-lcov-reporter": "^1.0.0",
    "q": "^1.0.0",
    "rimraf": "^2.2.5",
    "should": "^5.0.1"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "files": [
    "index.js",
    "bin"
  ],
  "gitHead": "e9e5ab7e70080e1bfb5650a4fdc4c8849e70b3e0",
  "homepage": "http://gulpjs.com",
  "license": "MIT",
  "man": [
    "gulp.1"
  ],
  "name": "gulp",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\r\n  <a href=\"http://gulpjs.com\">\r\n    <img height=\"257\" width=\"114\" src=\"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png\">\r\n  </a>\r\n  <p align=\"center\">The streaming build system</p>\r\n</p>\r\n\r\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Gitter chat][gitter-image]][gitter-url]\r\n\r\n## What is gulp?\r\n\r\n- **Automation** - gulp is a toolkit that helps you automate painful or time-consuming tasks in your development workflow.\r\n- **Platform-agnostic** - Integrations are built into all major IDEs and people are using gulp with PHP, .NET, Node.js, Java, and other platforms.\r\n- **Strong Ecosystem** - Use npm modules to do anything you want + over 2000 curated plugins for streaming file transformations\r\n- **Simple** - By providing only a minimal API surface, gulp is easy to learn and simple to use\r\n\r\n## Documentation\r\n\r\nFor a Getting started guide, API docs, recipes, making a plugin, etc. see the [documentation page](/docs/README.md)!\r\n\r\n## Sample `gulpfile.js`\r\n\r\nThis file is just a quick sample to give you a taste of what gulp does.\r\n\r\n```js\r\nvar gulp = require('gulp');\r\nvar less = require('gulp-less');\r\nvar babel = require('gulp-babel');\r\nvar concat = require('gulp-concat');\r\nvar uglify = require('gulp-uglify');\r\nvar rename = require('gulp-rename');\r\nvar cleanCSS = require('gulp-clean-css');\r\nvar del = require('del');\r\n\r\nvar paths = {\r\n  styles: {\r\n    src: 'src/styles/**/*.less',\r\n    dest: 'assets/styles/'\r\n  },\r\n  scripts: {\r\n    src: 'src/scripts/**/*.js',\r\n    dest: 'assets/scripts/'\r\n  }\r\n};\r\n\r\n/* Not all tasks need to use streams, a gulpfile is just another node program\r\n * and you can use all packages available on npm, but it must return either a\r\n * Promise, a Stream or take a callback and call it\r\n */\r\nfunction clean() {\r\n  // You can use multiple globbing patterns as you would with `gulp.src`,\r\n  // for example if you are using del 2.0 or above, return its promise\r\n  return del([ 'assets' ]);\r\n}\r\n\r\n/*\r\n * Define our tasks using plain functions\r\n */\r\nfunction styles() {\r\n  return gulp.src(paths.styles.src)\r\n    .pipe(less())\r\n    .pipe(cleanCSS())\r\n    // pass in options to the stream\r\n    .pipe(rename({\r\n      basename: 'main',\r\n      suffix: '.min'\r\n    }))\r\n    .pipe(gulp.dest(paths.styles.dest));\r\n}\r\n\r\nfunction scripts() {\r\n  return gulp.src(paths.scripts.src, { sourcemaps: true })\r\n    .pipe(babel())\r\n    .pipe(uglify())\r\n    .pipe(concat('main.min.js'))\r\n    .pipe(gulp.dest(paths.scripts.dest));\r\n}\r\n\r\nfunction watch() {\r\n  gulp.watch(paths.scripts.src, scripts);\r\n  gulp.watch(paths.styles.src, styles);\r\n}\r\n\r\n/*\r\n * You can use CommonJS `exports` module notation to declare tasks\r\n */\r\nexports.clean = clean;\r\nexports.styles = styles;\r\nexports.scripts = scripts;\r\nexports.watch = watch;\r\n\r\n/*\r\n * Specify if tasks run in series or parallel using `gulp.series` and `gulp.parallel`\r\n */\r\nvar build = gulp.series(clean, gulp.parallel(styles, scripts));\r\n\r\n/*\r\n * You can still use `gulp.task` to expose tasks\r\n */\r\ngulp.task('build', build);\r\n\r\n/*\r\n * Define default task that can be called by just running `gulp` from cli\r\n */\r\ngulp.task('default', build);\r\n```\r\n\r\n## Use last JavaScript version in your gulpfile\r\n\r\nNode already supports a lot of **ES2015**, to avoid compatibility problem we suggest to install Babel and rename your `gulpfile.js` as `gulpfile.babel.js`.\r\n\r\n```sh\r\nnpm install --save-dev babel-register babel-preset-es2015\r\n```\r\n\r\nThen create a **.babelrc** file with the preset configuration.\r\n\r\n```js\r\n{\r\n  \"presets\": [ \"es2015\" ]\r\n}\r\n```\r\n\r\nAnd here's the same sample from above written in **ES2015**.\r\n\r\n```js\r\nimport gulp from 'gulp';\r\nimport less from 'gulp-less';\r\nimport babel from 'gulp-babel';\r\nimport concat from 'gulp-concat';\r\nimport uglify from 'gulp-uglify';\r\nimport rename from 'gulp-rename';\r\nimport cleanCSS from 'gulp-clean-css';\r\nimport del from 'del';\r\n\r\nconst paths = {\r\n  styles: {\r\n    src: 'src/styles/**/*.less',\r\n    dest: 'assets/styles/'\r\n  },\r\n  scripts: {\r\n    src: 'src/scripts/**/*.js',\r\n    dest: 'assets/scripts/'\r\n  }\r\n};\r\n\r\n/*\r\n * For small tasks you can use arrow functions and export\r\n */\r\nconst clean = () => del([ 'assets' ]);\r\nexport { clean };\r\n\r\n/*\r\n * You can still declare named functions and export them as tasks\r\n */\r\nexport function styles() {\r\n  return gulp.src(paths.styles.src)\r\n    .pipe(less())\r\n    .pipe(cleanCSS())\r\n    // pass in options to the stream\r\n    .pipe(rename({\r\n      basename: 'main',\r\n      suffix: '.min'\r\n    }))\r\n    .pipe(gulp.dest(paths.styles.dest));\r\n}\r\n\r\nexport function scripts() {\r\n  return gulp.src(paths.scripts.src, { sourcemaps: true })\r\n    .pipe(babel())\r\n    .pipe(uglify())\r\n    .pipe(concat('main.min.js'))\r\n    .pipe(gulp.dest(paths.scripts.dest));\r\n}\r\n\r\nexport function watch() {\r\n  gulp.watch(paths.scripts.src, scripts);\r\n  gulp.watch(paths.styles.src, styles);\r\n}\r\n\r\nconst build = gulp.series(clean, gulp.parallel(styles, scripts));\r\nexport { build };\r\n\r\n/*\r\n * Export a default task\r\n */\r\nexport default build;\r\n```\r\n\r\n## Incremental Builds\r\n\r\nYou can filter out unchanged files between runs of a task using\r\nthe `gulp.src` function's `since` option and `gulp.lastRun`:\r\n```js\r\nconst paths = {\r\n  ...\r\n  images: {\r\n    src: 'src/images/**/*.{jpg,jpeg,png}',\r\n    dest: 'build/img/'\r\n  }\r\n}\r\n\r\nfunction images() {\r\n  return gulp.src(paths.images.src, {since: gulp.lastRun(images)})\r\n    .pipe(imagemin({optimizationLevel: 5}))\r\n    .pipe(gulp.dest(paths.images.dest));\r\n}\r\n\r\nfunction watch() {\r\n  gulp.watch(paths.images.src, images);\r\n}\r\n```\r\nTask run times are saved in memory and are lost when gulp exits. It will only\r\nsave time during the `watch` task when running the `images` task\r\nfor a second time.\r\n\r\nIf you want to compare modification time between files instead, we recommend these plugins:\r\n- [gulp-changed];\r\n- or [gulp-newer] - supports many:1 source:dest.\r\n\r\n[gulp-newer] example:\r\n```js\r\nfunction images() {\r\n  var dest = 'build/img';\r\n  return gulp.src(paths.images)\r\n    .pipe(newer(dest))  // pass through newer images only\r\n    .pipe(imagemin({optimizationLevel: 5}))\r\n    .pipe(gulp.dest(dest));\r\n}\r\n```\r\n\r\nIf you can't simply filter out unchanged files, but need them in a later phase\r\nof the stream, we recommend these plugins:\r\n- [gulp-cached] - in-memory file cache, not for operation on sets of files\r\n- [gulp-remember] - pairs nicely with gulp-cached\r\n\r\n[gulp-remember] example:\r\n```js\r\nfunction scripts() {\r\n  return gulp.src(scriptsGlob)\r\n    .pipe(cache('scripts'))    // only pass through changed files\r\n    .pipe(header('(function () {')) // do special things to the changed files...\r\n    .pipe(footer('})();'))     // for example,\r\n                               // add a simple module wrap to each file\r\n    .pipe(remember('scripts')) // add back all files to the stream\r\n    .pipe(concat('app.js'))    // do things that require all files\r\n    .pipe(gulp.dest('public/'))\r\n}\r\n```\r\n\r\n## Want to contribute?\r\n\r\nAnyone can help make this project better - check out our [Contributing guide](/CONTRIBUTING.md)!\r\n\r\n[downloads-image]: http://img.shields.io/npm/dm/gulp.svg\r\n[npm-url]: https://npmjs.org/package/gulp\r\n[npm-image]: http://img.shields.io/npm/v/gulp.svg\r\n\r\n[travis-url]: https://travis-ci.org/gulpjs/gulp\r\n[travis-image]: http://img.shields.io/travis/gulpjs/gulp.svg\r\n\r\n[coveralls-url]: https://coveralls.io/r/gulpjs/gulp\r\n[coveralls-image]: http://img.shields.io/coveralls/gulpjs/gulp/master.svg\r\n\r\n[gitter-url]: https://gitter.im/gulpjs/gulp\r\n[gitter-image]: https://badges.gitter.im/gulpjs/gulp.png\r\n\r\n[gulp-cached]: https://github.com/wearefractal/gulp-cached\r\n[gulp-remember]: https://github.com/ahaurw01/gulp-remember\r\n[gulp-changed]: https://github.com/sindresorhus/gulp-changed\r\n[gulp-newer]: https://github.com/tschaub/gulp-newer\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gulpjs/gulp.git"
  },
  "scripts": {
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage",
    "lint": "jshint bin test index.js --reporter node_modules/jshint-stylish/stylish.js --exclude node_modules && jscs bin test index.js",
    "test": "npm run-script lint && mocha --reporter spec"
  },
  "tags": [
    "build",
    "stream",
    "system",
    "make",
    "tool",
    "asset",
    "pipeline"
  ],
  "version": "4.0.0-alpha.2"
}
